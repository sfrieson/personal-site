{"version":3,"sources":["components/Button/index.tsx","components/TextArea/index.tsx","pages/Post/PostForm.tsx","pages/Post/RecentList.js","pages/Post/index.js","App.tsx","index.js"],"names":["Button","className","props","TextArea","name","value","label","htmlFor","id","useState","setValue","formState","setFormState","useEffect","fetch","process","method","headers","body","JSON","stringify","text","then","res","ok","catch","err","onClick","onSubmit","e","preventDefault","disabled","onChange","target","autoFocus","type","LOADING","Symbol","data","setData","json","map","key","Post","PostForm","RecentList","App","ReactDOM","render","document","getElementById"],"mappings":"2QASeA,G,MAJ2B,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAcC,EAAY,6BACrE,OAAO,0CAAQD,UAAW,UAAYA,GAAeC,MCqBxCC,G,MAtB6B,SAAC,GAKtC,IAAD,IAJJC,YAII,MAJG,GAIH,EAHJC,EAGI,EAHJA,MACAC,EAEI,EAFJA,MACGJ,EACC,wCACJ,OACE,yBAAKD,UAAU,oBACb,2BAAOA,UAAU,kBAAkBM,QAAQ,aACxCD,GAEH,4CACEL,UAAU,iBACVO,GAAG,YACHJ,KAAMA,EACNC,MAAOA,GACHH,OCVG,aAAO,IAAD,EACOO,mBAAS,IADhB,mBACZJ,EADY,KACLK,EADK,OAEeD,mBAPnB,WAKI,mBAEZE,EAFY,KAEDC,EAFC,KAInBC,qBAAU,WAPM,cAQVF,IACFC,EAVU,WAWVE,MAAMC,wCAA4C,CAChDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,KAAMhB,MAE5BiB,MAAK,SAAAC,GACAA,EAAIC,IACNZ,EAlBI,WAmBJF,EAAS,KAETE,EAzBE,YA4BLa,OAAM,SAAAC,GACLd,EA7BI,eAgCT,CAACD,EAAWN,IAOf,MAvCY,UAuCRM,EAEA,oCACE,yEACA,kBAAC,EAAD,CAAQgB,QAAS,kBAAMf,EAxCb,eAwCV,cACA,kBAAC,EAAD,CACEe,QAAS,WACPjB,EAAS,IACTE,EA9CK,aA2CT,UAxCQ,YAmDVD,EAEA,oCACE,qDACA,kBAAC,EAAD,CAAQgB,QAAS,kBAAMf,EA1Dd,aA0DT,iBAKJ,oCA9DY,YA+DTD,GAAyB,yCAC1B,0BAAMiB,SAhCW,SAACC,GACpBA,EAAEC,iBACFlB,EAjCc,eAgEV,8BAAUmB,SAhEA,cAgEUpB,GAClB,kBAAC,EAAD,CACEL,MAAM,QACND,MAAOA,EACP2B,SAAU,SAACH,GAAD,OACRnB,EAASmB,EAAEI,OAAO5B,QAEpB6B,WAAS,IAEX,kBAAC,EAAD,CAAQC,KAAK,UAAb,iBC/EJC,EAAUC,OAAO,WACR,aAAO,IAAD,EACK5B,mBAAS2B,GADd,mBACZE,EADY,KACNC,EADM,KAQnB,OANA1B,qBAAU,WACRC,MAAMC,yCACHO,MAAK,SAAAC,GAAG,OAAIA,EAAIiB,UAChBlB,MAAK,gBAAGgB,EAAH,EAAGA,KAAH,OAAcC,EAAQD,QAC7B,IAECA,IAASF,EAAgB,UAG3B,4BACGE,EAAKG,KAAI,gBAAGjC,EAAH,EAAGA,GAAIa,EAAP,EAAOA,KAAP,OAAkB,wBAAIqB,IAAKlC,GAAKa,QCSjCsB,MApBf,WACE,OACE,6BACE,gCACE,oCAEF,8BACE,iCACE,6CACA,kBAACC,EAAD,OAEF,iCACE,4CACA,kBAACC,EAAD,U,MCTKC,MAJf,WACE,OAAO,kBAAC,EAAD,OCCTC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.74fefe3b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst Button: React.FC<{\n  type?: \"button\" | \"submit\" | \"reset\";\n} & React.HTMLProps<HTMLButtonElement>> = ({ className, ...props }) => {\n  return <button className={\"button \" + className} {...props} />;\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"./styles.css\";\n\nconst TextArea: React.FunctionComponent<{\n  label: string;\n} & React.HTMLProps<HTMLTextAreaElement>> = ({\n  name = \"\",\n  value,\n  label,\n  ...props\n}) => {\n  return (\n    <div className=\"textArea_wrapper\">\n      <label className=\"text-area_label\" htmlFor=\"text-area\">\n        {label}\n      </label>\n      <textarea\n        className=\"text-area_area\"\n        id=\"text-area\"\n        name={name}\n        value={value}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default TextArea;\n","import React, { useEffect, useState } from \"react\";\n\nimport Button from \"../../components/Button\";\nimport TextArea from \"../../components/TextArea\";\n\nconst ERROR = \"error\";\nconst NEW_FORM = \"newform\";\nconst PENDING = \"pending\";\nconst SUBMITTED = \"submitted\";\nconst SUCCESS = \"success\";\n\nexport default () => {\n  const [value, setValue] = useState(\"\");\n  const [formState, setFormState] = useState(NEW_FORM);\n\n  useEffect(() => {\n    if (formState === SUBMITTED) {\n      setFormState(PENDING);\n      fetch(process.env.REACT_APP_SERVER_URL + \"/post\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ text: value })\n      })\n        .then(res => {\n          if (res.ok) {\n            setFormState(SUCCESS);\n            setValue(\"\");\n          } else {\n            setFormState(ERROR);\n          }\n        })\n        .catch(err => {\n          setFormState(ERROR);\n        });\n    }\n  }, [formState, value]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setFormState(SUBMITTED);\n  };\n\n  if (formState === ERROR) {\n    return (\n      <>\n        <p>Something went wrong with that submission.</p>\n        <Button onClick={() => setFormState(SUBMITTED)}>Try again?</Button>\n        <Button\n          onClick={() => {\n            setValue(\"\");\n            setFormState(NEW_FORM);\n          }}\n        >\n          Reset\n        </Button>\n      </>\n    );\n  }\n  if (formState === SUCCESS) {\n    return (\n      <>\n        <p>Submitted successfully</p>\n        <Button onClick={() => setFormState(NEW_FORM)}>Add another?</Button>\n      </>\n    );\n  }\n  return (\n    <>\n      {formState === PENDING && <p>Submitting</p>}\n      <form onSubmit={handleSubmit}>\n        <fieldset disabled={formState === SUBMITTED}>\n          <TextArea\n            label=\"Entry\"\n            value={value}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n              setValue(e.target.value)\n            }\n            autoFocus\n          />\n          <Button type=\"submit\">Save post</Button>\n        </fieldset>\n      </form>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nconst LOADING = Symbol('loading');\nexport default () => {\n  const [data, setData] = useState(LOADING);\n  useEffect(() => {\n    fetch(process.env.REACT_APP_SERVER_URL + '/post')\n      .then(res => res.json())\n      .then(({ data }) => setData(data))\n  }, []);\n\n  if (data === LOADING) return 'Loading';\n\n  return (\n    <ul>\n      {data.map(({ id, text }) => <li key={id}>{text}</li>)}\n    </ul>\n  )\n};\n","import React from 'react';\nimport PostForm from './PostForm';\nimport RecentList from './RecentList';\n\nfunction Post () {\n  return (\n    <div>\n      <header>\n        <h1>Ohr</h1>\n      </header>\n      <main>\n        <section>\n          <h2>Submit a post</h2>\n          <PostForm />\n        </section>\n        <section>\n          <h2>Recent Posts</h2>\n          <RecentList />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Post;\n","import React from \"react\";\nimport Post from \"./pages/Post\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Post />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}