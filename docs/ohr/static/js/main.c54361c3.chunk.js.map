{"version":3,"sources":["pages/Post/PostForm.js","pages/Post/RecentList.js","pages/Post/index.js","App.js","serviceWorker.js","index.js"],"names":["useState","value","setValue","formState","setFormState","useEffect","fetch","process","method","headers","body","JSON","stringify","text","then","res","ok","catch","err","onClick","onSubmit","e","preventDefault","disabled","onChange","target","autoFocus","type","LOADING","Symbol","data","setData","json","map","id","key","Post","PostForm","RecentList","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oJAQe,aAAO,IAAD,EACOA,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEeF,mBAPnB,WAKI,mBAEZG,EAFY,KAEDC,EAFC,KAInBC,qBAAU,WAPM,cAQVF,IACFC,EAVU,WAWVE,MAAMC,wCAA4C,CAChDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,KAAMZ,MAC5Ba,MAAK,SAACC,GACHA,EAAIC,IACNZ,EAjBM,WAkBNF,EAAS,KAETE,EAxBI,YA0BLa,OAAM,SAAAC,GACPd,EA3BM,eA8BT,CAACD,EAAWF,IAOf,MArCY,UAqCRE,EACK,oCACL,yEACA,4BAAQgB,QAAS,kBAAMf,EArCX,eAqCZ,cACA,4BAAQe,QAAS,WAAQjB,EAAS,IAAKE,EAxC5B,aAwCX,UArCU,YAwCVD,EACK,oCACL,qDACA,4BAAQgB,QAAS,kBAAMf,EA9CZ,aA8CX,iBAGG,oCAhDO,YAiDXD,GAAyB,yCAC1B,0BAAMiB,SApBa,SAACC,GACpBA,EAAEC,iBACFlB,EA/Bc,eAkDZ,8BAAUmB,SAlDE,cAkDQpB,GAClB,8BAAUF,MAAOA,EAAOuB,SAAU,SAACH,GAAD,OAAOnB,EAASmB,EAAEI,OAAOxB,QAAQyB,WAAS,IAC5E,2BAAOC,KAAK,eCvDdC,EAAUC,OAAO,WACR,aAAO,IAAD,EACK7B,mBAAS4B,GADd,mBACZE,EADY,KACNC,EADM,KAQnB,OANA1B,qBAAU,WACRC,MAAMC,yCACHO,MAAK,SAAAC,GAAG,OAAIA,EAAIiB,UAChBlB,MAAK,gBAAGgB,EAAH,EAAGA,KAAH,OAAcC,EAAQD,QAC7B,IAECA,IAASF,EAAgB,UAG3B,4BACGE,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAIrB,EAAP,EAAOA,KAAP,OAAkB,wBAAIsB,IAAKD,GAAKrB,QCSjCuB,MApBf,WACE,OACE,6BACE,gCACE,oCAEF,8BACE,iCACE,6CACA,kBAACC,EAAD,OAEF,iCACE,4CACA,kBAACC,EAAD,UCRKC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.c54361c3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst ERROR = 'error';\nconst NEW_FORM = 'newform';\nconst PENDING = 'pending';\nconst SUBMITTED = 'submitted';\nconst SUCCESS = 'success';\n\nexport default () => {\n  const [value, setValue] = useState('');\n  const [formState, setFormState] = useState(NEW_FORM);\n\n  useEffect(() => {\n    if (formState === SUBMITTED) {\n      setFormState(PENDING);\n      fetch(process.env.REACT_APP_SERVER_URL + '/post', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: value })\n      }).then((res) => {\n        if (res.ok) {\n          setFormState(SUCCESS);\n          setValue('');\n        } else {\n          setFormState(ERROR);\n        }\n      }).catch(err => {\n        setFormState(ERROR);\n      });\n    }\n  }, [formState, value]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setFormState(SUBMITTED);\n  };\n\n  if (formState === ERROR) {\n    return <>\n      <p>Something went wrong with that submission.</p>\n      <button onClick={() => setFormState(SUBMITTED)}>Try again?</button>\n      <button onClick={() => { setValue(''); setFormState(NEW_FORM); }}>Reset</button>\n    </>;\n  }\n  if (formState === SUCCESS) {\n    return <>\n      <p>Submitted successfully</p>\n      <button onClick={() => setFormState(NEW_FORM)}>Add another?</button>\n    </>;\n  }\n  return <>\n    {formState === PENDING && <p>Submitting</p>}\n    <form onSubmit={handleSubmit}>\n      <fieldset disabled={formState === SUBMITTED}>\n        <textarea value={value} onChange={(e) => setValue(e.target.value)} autoFocus />\n        <input type=\"submit\" />\n      </fieldset>\n    </form>\n  </>;\n};\n","import React, { useEffect, useState } from 'react';\n\nconst LOADING = Symbol('loading');\nexport default () => {\n  const [data, setData] = useState(LOADING);\n  useEffect(() => {\n    fetch(process.env.REACT_APP_SERVER_URL + '/post')\n      .then(res => res.json())\n      .then(({ data }) => setData(data))\n  }, []);\n\n  if (data === LOADING) return 'Loading';\n\n  return (\n    <ul>\n      {data.map(({ id, text }) => <li key={id}>{text}</li>)}\n    </ul>\n  )\n};\n","import React from 'react';\nimport PostForm from './PostForm';\nimport RecentList from './RecentList';\n\nfunction Post () {\n  return (\n    <div>\n      <header>\n        <h1>Ohr</h1>\n      </header>\n      <main>\n        <section>\n          <h2>Submit a post</h2>\n          <PostForm />\n        </section>\n        <section>\n          <h2>Recent Posts</h2>\n          <RecentList />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport Post from './pages/Post';\n\nfunction App () {\n  return (\n    <Post />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}