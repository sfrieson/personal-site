module.exports = require('babel-loader').custom((babel) => {
  function myPlugin() {
    console.log(arguments);
    return {
      visitor: {
        CallExpression(nodePath) {
          if (nodePath.node.callee.type === 'Import') {
            console.log(nodePath.node.arguments[0].value);
          }
        },
      },
    };
  }

  return {
    // Passed the loader options.
    // customOptions({ opt1, opt2, ...loader }) {
    //   return {
    //     // Pull out any custom options that the loader might have.
    //     custom: { opt1, opt2 },

    //     // Pass the options back with the two custom options removed.
    //     loader,
    //   };
    // },

    // Passed Babel's 'PartialConfig' object.
    config(cfg) {
      // if (cfg.hasFilesystemConfig()) {
      //   // Use the normal config
      //   return cfg.options;
      // }

      return {
        ...cfg.options,
        plugins: [
          ...(cfg.options.plugins || []),

          // Include a custom plugin in the options.
          myPlugin,
        ],
      };
    },

    // result(result) {
    //   return {
    //     ...result,
    //     code: result.code + '\n// Generated by some custom loader',
    //   };
    // },
  };
});

module.exports = function extractItAll(source, map, meta) {
  console.log(source);
  return source;
};
